**How did viewing a diff between two versions of a file help you see the bug 
  that was introduced?

It helps in pinpointing the exact place in code where the error is.

**How could having easy access to the entire history of a file make you a more
  efficient programmer in the long term?

A programmer can switch to different/previous versions of a file in case the 
current version is not in correct form.

**What do you think are the pros and cons of manually choosing when to create 
  a commit, like you do in Git, vs having versions automatically saved, like 
  Google Docs does?

manually choosing the commit:
	o. Pros:
		+ We decide when to commit
		+ More chances that the commit will be logical
	o. Cons:
		+ Since we decide when to commit, some frequent illogical changes may
		  lead to cluttered commit logs
		+ We need to ensure that the commit happened every time a logical 
		  change is made 
Automatic commit:
	o. Pros:
		+ We don't need to ensure that the commit happened every time a 
		  logical change is made 
	o. Cons:
		+ All short changes will be automatically committed. This leads to 
		  illogical commits and cluttered commit logs.

**Why do you think some version control systems, like Git, allow saving 
  multiple files in one commit, while others, like Google Docs, treat each file 
  separately?

Because in many applications, many files together represent a system or a 
subsystem. Thus, changes made in a single file of a subsystem may affect other
files and their output as well. Hence, the multi-file commit strategy adopted 
by version control systems, like Git, is correct one.

**How can you use the commands git log and git diff to view the history of 
  files?

	o. Go inside the repo folder
	o. Do git log
	o. Do git diff <commit-id-old> <commit-id-new>

**How might using version control make you more confident to make changes that
  could break something?

With version control in place, one can switch back and forth between commits.
Thus, it eliminates any fear that current changes will break the already 
working software. We can always revert back to previous working version.

**What do you want to try using Git for?

I would like to try using git for managing web-development projects, c-progams,
openssl security programming stuff etc.


